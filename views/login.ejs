<!DOCTYPE html>
<html>

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <meta http-equiv="x-ua-compatible" content="ie=edge">
  <title>Sign-in</title>
  <script src="https://unpkg.com/axios/dist/axios.min.js"></script>
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css"
    integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
  <style>
    @import url(https://fonts.googleapis.com/css?family=Roboto:400,100);

    body {
      font-family: 'Roboto', sans-serif;
      margin-top: 25px;
      margin-bottom: 25px;
    }

    .login-card {
      padding: 40px;
      padding-top: 0px;
      padding-bottom: 10px;
      width: 274px;
      background-color: #F7F7F7;
      margin: 0 auto 10px;
      border-radius: 2px;
      box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);
      overflow: hidden;
    }

    .login-card+.login-card {
      padding-top: 10px;
    }

    .login-card h1 {
      font-weight: 100;
      text-align: center;
      font-size: 2.3em;
    }

    .login-card h1+p {
      font-weight: 100;
      text-align: center;
    }

    .login-card [type=submit] {
      width: 100%;
      display: block;
      margin-bottom: 10px;
      position: relative;
    }

    .login-card input[type=text],
    input[type=email],
    input[type=password] {
      height: 44px;
      font-size: 16px;
      width: 100%;
      margin-bottom: 10px;
      -webkit-appearance: none;
      background: #fff;
      border: 1px solid #d9d9d9;
      border-top: 1px solid #c0c0c0;
      padding: 0 8px;
      box-sizing: border-box;
      -moz-box-sizing: border-box;
    }

    .login {
      text-align: center;
      font-size: 14px;
      font-family: 'Arial', sans-serif;
      font-weight: 700;
      height: 36px;
      padding: 13px 44px 31px 44px;
    }

    .login-submit {
      border: 0px;
      color: #fff;
      text-shadow: 0 1px rgba(0, 0, 0, 0.1);
      background-color: #4d90fe;
    }

    .login-card a {
      text-decoration: none;
      color: #666;
      font-weight: 400;
      text-align: center;
      display: inline-block;
      opacity: 0.6;
    }

    .login-help {
      width: 100%;
      text-align: center;
      font-size: 12px;
    }

    .login-client-image img {
      margin-bottom: 20px;
      display: block;
      margin-left: auto;
      margin-right: auto;
      width: 20%;
    }

    .login-card input[type=checkbox] {
      margin-bottom: 10px;
    }

    .login-card label {
      color: #999;
    }

    ul {
      font-weight: 100;
      padding-left: 1em;
      list-style-type: circle;
    }

    li+ul,
    ul+li,
    li+li {
      padding-top: 0.3em;
    }

    button {
      cursor: pointer;
    }

    #sigInButton,
    #loading {
      display: none;
    }
  </style>
</head>

<body>
  <% if (flash) { %>
    <p>
      <%= flash %>
    </p>
    <% } %>
      <div class="p-3 mt-5 text-center">
        <img style="width: 250px;" src="/logo.jpg" alt="">
        <br>
        <h1 style="font-size: 30px;color: #008fe2;" class="mt-4">Mail to wallet</h1>
      </div>
      <div class="flex-col space-y-2 justify-center items-center text-center">
        <p id="error" style="color:#fa3939">

        </p>
        <button id='loginButton' onclick="" class="login login-submit mt-3">
          Connect your wallet
        </button>
        <button id='sigInButton' onclick="" class="login login-submit mt-3">
          SigIn with mail to wallet
        </button>
        <!-- <p id='userWallet' class='text-lg text-gray-600 my-2'></p> -->
      </div>
      <div class="text-center" id='loading'>
        <img style="width: 400px;" src="/loading.gif" alt="">
      </div>
      <script>
        const generateMessage = async data => {
          try {
            const response = await axios.post(`https://v900e2c4ig.execute-api.us-east-1.amazonaws.com/dev/createAddress`, data);
            const newTodoItem = response.data;
            console.log(`Added a new Todo!`, newTodoItem);
            return newTodoItem;
          } catch (errors) {
            console.error(errors);
          }
        };
        const verifySignedMessage = async data => {
          try {
            const response = await axios.post(`https://v900e2c4ig.execute-api.us-east-1.amazonaws.com/dev/verifySignedMessage`, data);
            const newTodoItem = response.data;
            console.log(`Added a new Todo!`, newTodoItem);
            return newTodoItem;
          } catch (errors) {
            console.error(errors);
          }
        };
        if (typeof window.ethereum !== 'undefined') {
          console.log('MetaMask is installed!');
        }
        window.userWalletAddress = null
        const loginButton = document.getElementById('loginButton')
        const errorSection = document.getElementById('error')
        const sigInButton = document.getElementById('sigInButton')
        const loading = document.getElementById('loading')
        const userWallet = document.getElementById('userWallet')

        /**
     * sends a request to the specified url from a form. this will change the window location.
     * @param {string} path the path to send the post request to
     * @param {object} params the parameters to add to the url
     * @param {string} [method=post] the method to use on the form
     */

        function post(path, params, method = 'post') {

          // The rest of this code assumes you are not using a library.
          // It can be made less verbose if you use one.
          const form = document.createElement('form');
          form.method = method;
          form.action = path;

          for (const key in params) {
            if (params.hasOwnProperty(key)) {
              const hiddenField = document.createElement('input');
              hiddenField.type = 'hidden';
              hiddenField.name = key;
              hiddenField.value = params[key];

              form.appendChild(hiddenField);
            }
          }

          document.body.appendChild(form);
          form.submit();
        }

        function toggleButton() {
          if (!window.ethereum) {
            loginButton.innerText = 'MetaMask is not installed'
            loginButton.classList.remove('bg-purple-500', 'text-white')
            loginButton.classList.add('bg-gray-500', 'text-gray-100', 'cursor-not-allowed')
            return false
          }

          loginButton.addEventListener('click', ConnectWithMetaMask)
        }

        async function ConnectWithMetaMask() {
          loginButton.style.display = 'none';
          loading.style.display = 'block';
          errorSection.innerHTML = '';
          const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' })
            .catch((e) => {
              errorSection.innerText = e.message;
              console.error(e.message)
              return
            })
          if (!accounts) {
            loginButton.style.display = 'inline';
            loading.style.display = 'none';
            return
          }

          window.userWalletAddress = accounts[0]
          sigInButton.addEventListener('click', loginWithMetaMask)
          loading.style.display = 'none';
          sigInButton.style.display = 'inline';
        }
        async function loginWithMetaMask() {
          sigInButton.style.display = 'none';
          loading.style.display = 'block';
          errorSection.innerHTML = '';
          window.ethereum.request({ method: 'eth_getBalance', params: [window.userWalletAddress, 'latest'] })
            .then(balance => {
              console.log('balance', balance)
              // setUserBalance(ethers.utils.formatEther(balance));
            })
            .catch(error => {
              errorSection.innerText = error.message;
              setErrorMessage(error.message);
            });
          generateMessage({ address: window.userWalletAddress, interactionId: '<%= uid %>' }).then(data => {
            console.log(data.messageToSign)
            window.ethereum.request({ method: 'personal_sign', params: [window.userWalletAddress, data.messageToSign] })
              .then(sign => {
                post("/interaction/<%= uid %>/login", {
                  email: 'achraf',
                  password: '123456',
                  address: window.userWalletAddress,
                  interactionId: '<%= uid %>',
                  signedMessage: sign,
                  nounce: data.messageToSign.split(': ')[1]
                });
              })
              .catch(error => {
                sigInButton.style.display = 'inline';
                loading.style.display = 'none';
                errorSection.innerText = error.message;
                setErrorMessage(error.message);
              });
          });
          loginButton.removeEventListener('click', loginWithMetaMask)
          setTimeout(() => {
            loginButton.addEventListener('click', signOutOfMetaMask)
          }, 200)
        }

        function signOutOfMetaMask() {
          window.userWalletAddress = null
          userWallet.innerText = ''
          loginButton.innerText = 'Sign in with MetaMask'

          loginButton.removeEventListener('click', signOutOfMetaMask)
          setTimeout(() => {
            sigInButton.addEventListener('click', loginWithMetaMask)
          }, 200)
        }

        window.addEventListener('DOMContentLoaded', () => {
          toggleButton()
        });
      </script>
</body>

</html>